/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WorldConfig } from "./WorldConfig";
import { WorldConfigCountArgs } from "./WorldConfigCountArgs";
import { WorldConfigFindManyArgs } from "./WorldConfigFindManyArgs";
import { WorldConfigFindUniqueArgs } from "./WorldConfigFindUniqueArgs";
import { CreateWorldConfigArgs } from "./CreateWorldConfigArgs";
import { UpdateWorldConfigArgs } from "./UpdateWorldConfigArgs";
import { DeleteWorldConfigArgs } from "./DeleteWorldConfigArgs";
import { WorldConfigService } from "../worldConfig.service";
@graphql.Resolver(() => WorldConfig)
export class WorldConfigResolverBase {
  constructor(protected readonly service: WorldConfigService) {}

  async _worldConfigsMeta(
    @graphql.Args() args: WorldConfigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WorldConfig])
  async worldConfigs(
    @graphql.Args() args: WorldConfigFindManyArgs
  ): Promise<WorldConfig[]> {
    return this.service.worldConfigs(args);
  }

  @graphql.Query(() => WorldConfig, { nullable: true })
  async worldConfig(
    @graphql.Args() args: WorldConfigFindUniqueArgs
  ): Promise<WorldConfig | null> {
    const result = await this.service.worldConfig(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WorldConfig)
  async createWorldConfig(
    @graphql.Args() args: CreateWorldConfigArgs
  ): Promise<WorldConfig> {
    return await this.service.createWorldConfig({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WorldConfig)
  async updateWorldConfig(
    @graphql.Args() args: UpdateWorldConfigArgs
  ): Promise<WorldConfig | null> {
    try {
      return await this.service.updateWorldConfig({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorldConfig)
  async deleteWorldConfig(
    @graphql.Args() args: DeleteWorldConfigArgs
  ): Promise<WorldConfig | null> {
    try {
      return await this.service.deleteWorldConfig(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
