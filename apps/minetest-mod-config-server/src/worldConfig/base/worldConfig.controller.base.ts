/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorldConfigService } from "../worldConfig.service";
import { WorldConfigCreateInput } from "./WorldConfigCreateInput";
import { WorldConfig } from "./WorldConfig";
import { WorldConfigFindManyArgs } from "./WorldConfigFindManyArgs";
import { WorldConfigWhereUniqueInput } from "./WorldConfigWhereUniqueInput";
import { WorldConfigUpdateInput } from "./WorldConfigUpdateInput";

export class WorldConfigControllerBase {
  constructor(protected readonly service: WorldConfigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WorldConfig })
  async createWorldConfig(
    @common.Body() data: WorldConfigCreateInput
  ): Promise<WorldConfig> {
    return await this.service.createWorldConfig({
      data: data,
      select: {
        createdAt: true,
        creationDate: true,
        description: true,
        id: true,
        updatedAt: true,
        worldName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WorldConfig] })
  @ApiNestedQuery(WorldConfigFindManyArgs)
  async worldConfigs(@common.Req() request: Request): Promise<WorldConfig[]> {
    const args = plainToClass(WorldConfigFindManyArgs, request.query);
    return this.service.worldConfigs({
      ...args,
      select: {
        createdAt: true,
        creationDate: true,
        description: true,
        id: true,
        updatedAt: true,
        worldName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WorldConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async worldConfig(
    @common.Param() params: WorldConfigWhereUniqueInput
  ): Promise<WorldConfig | null> {
    const result = await this.service.worldConfig({
      where: params,
      select: {
        createdAt: true,
        creationDate: true,
        description: true,
        id: true,
        updatedAt: true,
        worldName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WorldConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWorldConfig(
    @common.Param() params: WorldConfigWhereUniqueInput,
    @common.Body() data: WorldConfigUpdateInput
  ): Promise<WorldConfig | null> {
    try {
      return await this.service.updateWorldConfig({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creationDate: true,
          description: true,
          id: true,
          updatedAt: true,
          worldName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WorldConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorldConfig(
    @common.Param() params: WorldConfigWhereUniqueInput
  ): Promise<WorldConfig | null> {
    try {
      return await this.service.deleteWorldConfig({
        where: params,
        select: {
          createdAt: true,
          creationDate: true,
          description: true,
          id: true,
          updatedAt: true,
          worldName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
