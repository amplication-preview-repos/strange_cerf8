/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WorldConfig as PrismaWorldConfig } from "@prisma/client";

export class WorldConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorldConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.worldConfig.count(args);
  }

  async worldConfigs<T extends Prisma.WorldConfigFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorldConfigFindManyArgs>
  ): Promise<PrismaWorldConfig[]> {
    return this.prisma.worldConfig.findMany<Prisma.WorldConfigFindManyArgs>(
      args
    );
  }
  async worldConfig<T extends Prisma.WorldConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorldConfigFindUniqueArgs>
  ): Promise<PrismaWorldConfig | null> {
    return this.prisma.worldConfig.findUnique(args);
  }
  async createWorldConfig<T extends Prisma.WorldConfigCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorldConfigCreateArgs>
  ): Promise<PrismaWorldConfig> {
    return this.prisma.worldConfig.create<T>(args);
  }
  async updateWorldConfig<T extends Prisma.WorldConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorldConfigUpdateArgs>
  ): Promise<PrismaWorldConfig> {
    return this.prisma.worldConfig.update<T>(args);
  }
  async deleteWorldConfig<T extends Prisma.WorldConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorldConfigDeleteArgs>
  ): Promise<PrismaWorldConfig> {
    return this.prisma.worldConfig.delete(args);
  }
}
