/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlayerSettingsService } from "../playerSettings.service";
import { PlayerSettingsCreateInput } from "./PlayerSettingsCreateInput";
import { PlayerSettings } from "./PlayerSettings";
import { PlayerSettingsFindManyArgs } from "./PlayerSettingsFindManyArgs";
import { PlayerSettingsWhereUniqueInput } from "./PlayerSettingsWhereUniqueInput";
import { PlayerSettingsUpdateInput } from "./PlayerSettingsUpdateInput";

export class PlayerSettingsControllerBase {
  constructor(protected readonly service: PlayerSettingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerSettings })
  async createPlayerSettings(
    @common.Body() data: PlayerSettingsCreateInput
  ): Promise<PlayerSettings> {
    return await this.service.createPlayerSettings({
      data: data,
      select: {
        createdAt: true,
        id: true,
        lastLogin: true,
        playerName: true,
        preferences: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerSettings] })
  @ApiNestedQuery(PlayerSettingsFindManyArgs)
  async playerSettingsItems(
    @common.Req() request: Request
  ): Promise<PlayerSettings[]> {
    const args = plainToClass(PlayerSettingsFindManyArgs, request.query);
    return this.service.playerSettingsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        lastLogin: true,
        playerName: true,
        preferences: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async playerSettings(
    @common.Param() params: PlayerSettingsWhereUniqueInput
  ): Promise<PlayerSettings | null> {
    const result = await this.service.playerSettings({
      where: params,
      select: {
        createdAt: true,
        id: true,
        lastLogin: true,
        playerName: true,
        preferences: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlayerSettings(
    @common.Param() params: PlayerSettingsWhereUniqueInput,
    @common.Body() data: PlayerSettingsUpdateInput
  ): Promise<PlayerSettings | null> {
    try {
      return await this.service.updatePlayerSettings({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          lastLogin: true,
          playerName: true,
          preferences: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlayerSettings(
    @common.Param() params: PlayerSettingsWhereUniqueInput
  ): Promise<PlayerSettings | null> {
    try {
      return await this.service.deletePlayerSettings({
        where: params,
        select: {
          createdAt: true,
          id: true,
          lastLogin: true,
          playerName: true,
          preferences: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
