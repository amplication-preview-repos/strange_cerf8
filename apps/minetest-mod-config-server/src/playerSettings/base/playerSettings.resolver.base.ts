/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PlayerSettings } from "./PlayerSettings";
import { PlayerSettingsCountArgs } from "./PlayerSettingsCountArgs";
import { PlayerSettingsFindManyArgs } from "./PlayerSettingsFindManyArgs";
import { PlayerSettingsFindUniqueArgs } from "./PlayerSettingsFindUniqueArgs";
import { CreatePlayerSettingsArgs } from "./CreatePlayerSettingsArgs";
import { UpdatePlayerSettingsArgs } from "./UpdatePlayerSettingsArgs";
import { DeletePlayerSettingsArgs } from "./DeletePlayerSettingsArgs";
import { PlayerSettingsService } from "../playerSettings.service";
@graphql.Resolver(() => PlayerSettings)
export class PlayerSettingsResolverBase {
  constructor(protected readonly service: PlayerSettingsService) {}

  async _playerSettingsItemsMeta(
    @graphql.Args() args: PlayerSettingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PlayerSettings])
  async playerSettingsItems(
    @graphql.Args() args: PlayerSettingsFindManyArgs
  ): Promise<PlayerSettings[]> {
    return this.service.playerSettingsItems(args);
  }

  @graphql.Query(() => PlayerSettings, { nullable: true })
  async playerSettings(
    @graphql.Args() args: PlayerSettingsFindUniqueArgs
  ): Promise<PlayerSettings | null> {
    const result = await this.service.playerSettings(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlayerSettings)
  async createPlayerSettings(
    @graphql.Args() args: CreatePlayerSettingsArgs
  ): Promise<PlayerSettings> {
    return await this.service.createPlayerSettings({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PlayerSettings)
  async updatePlayerSettings(
    @graphql.Args() args: UpdatePlayerSettingsArgs
  ): Promise<PlayerSettings | null> {
    try {
      return await this.service.updatePlayerSettings({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlayerSettings)
  async deletePlayerSettings(
    @graphql.Args() args: DeletePlayerSettingsArgs
  ): Promise<PlayerSettings | null> {
    try {
      return await this.service.deletePlayerSettings(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
