/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PlayerSettings as PrismaPlayerSettings } from "@prisma/client";

export class PlayerSettingsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerSettingsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerSettings.count(args);
  }

  async playerSettingsItems<T extends Prisma.PlayerSettingsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlayerSettingsFindManyArgs>
  ): Promise<PrismaPlayerSettings[]> {
    return this.prisma.playerSettings.findMany<Prisma.PlayerSettingsFindManyArgs>(
      args
    );
  }
  async playerSettings<T extends Prisma.PlayerSettingsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlayerSettingsFindUniqueArgs>
  ): Promise<PrismaPlayerSettings | null> {
    return this.prisma.playerSettings.findUnique(args);
  }
  async createPlayerSettings<T extends Prisma.PlayerSettingsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlayerSettingsCreateArgs>
  ): Promise<PrismaPlayerSettings> {
    return this.prisma.playerSettings.create<T>(args);
  }
  async updatePlayerSettings<T extends Prisma.PlayerSettingsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlayerSettingsUpdateArgs>
  ): Promise<PrismaPlayerSettings> {
    return this.prisma.playerSettings.update<T>(args);
  }
  async deletePlayerSettings<T extends Prisma.PlayerSettingsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlayerSettingsDeleteArgs>
  ): Promise<PrismaPlayerSettings> {
    return this.prisma.playerSettings.delete(args);
  }
}
