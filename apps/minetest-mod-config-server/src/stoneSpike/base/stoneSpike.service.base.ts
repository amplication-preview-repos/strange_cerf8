/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, StoneSpike as PrismaStoneSpike } from "@prisma/client";

export class StoneSpikeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StoneSpikeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.stoneSpike.count(args);
  }

  async stoneSpikes<T extends Prisma.StoneSpikeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoneSpikeFindManyArgs>
  ): Promise<PrismaStoneSpike[]> {
    return this.prisma.stoneSpike.findMany<Prisma.StoneSpikeFindManyArgs>(args);
  }
  async stoneSpike<T extends Prisma.StoneSpikeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoneSpikeFindUniqueArgs>
  ): Promise<PrismaStoneSpike | null> {
    return this.prisma.stoneSpike.findUnique(args);
  }
  async createStoneSpike<T extends Prisma.StoneSpikeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoneSpikeCreateArgs>
  ): Promise<PrismaStoneSpike> {
    return this.prisma.stoneSpike.create<T>(args);
  }
  async updateStoneSpike<T extends Prisma.StoneSpikeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoneSpikeUpdateArgs>
  ): Promise<PrismaStoneSpike> {
    return this.prisma.stoneSpike.update<T>(args);
  }
  async deleteStoneSpike<T extends Prisma.StoneSpikeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoneSpikeDeleteArgs>
  ): Promise<PrismaStoneSpike> {
    return this.prisma.stoneSpike.delete(args);
  }
}
