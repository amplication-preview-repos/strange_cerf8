/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StoneSpikeService } from "../stoneSpike.service";
import { StoneSpikeCreateInput } from "./StoneSpikeCreateInput";
import { StoneSpike } from "./StoneSpike";
import { StoneSpikeFindManyArgs } from "./StoneSpikeFindManyArgs";
import { StoneSpikeWhereUniqueInput } from "./StoneSpikeWhereUniqueInput";
import { StoneSpikeUpdateInput } from "./StoneSpikeUpdateInput";

export class StoneSpikeControllerBase {
  constructor(protected readonly service: StoneSpikeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StoneSpike })
  async createStoneSpike(
    @common.Body() data: StoneSpikeCreateInput
  ): Promise<StoneSpike> {
    return await this.service.createStoneSpike({
      data: data,
      select: {
        createdAt: true,
        height: true,
        id: true,
        material: true,
        updatedAt: true,
        width: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StoneSpike] })
  @ApiNestedQuery(StoneSpikeFindManyArgs)
  async stoneSpikes(@common.Req() request: Request): Promise<StoneSpike[]> {
    const args = plainToClass(StoneSpikeFindManyArgs, request.query);
    return this.service.stoneSpikes({
      ...args,
      select: {
        createdAt: true,
        height: true,
        id: true,
        material: true,
        updatedAt: true,
        width: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StoneSpike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async stoneSpike(
    @common.Param() params: StoneSpikeWhereUniqueInput
  ): Promise<StoneSpike | null> {
    const result = await this.service.stoneSpike({
      where: params,
      select: {
        createdAt: true,
        height: true,
        id: true,
        material: true,
        updatedAt: true,
        width: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StoneSpike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStoneSpike(
    @common.Param() params: StoneSpikeWhereUniqueInput,
    @common.Body() data: StoneSpikeUpdateInput
  ): Promise<StoneSpike | null> {
    try {
      return await this.service.updateStoneSpike({
        where: params,
        data: data,
        select: {
          createdAt: true,
          height: true,
          id: true,
          material: true,
          updatedAt: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StoneSpike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStoneSpike(
    @common.Param() params: StoneSpikeWhereUniqueInput
  ): Promise<StoneSpike | null> {
    try {
      return await this.service.deleteStoneSpike({
        where: params,
        select: {
          createdAt: true,
          height: true,
          id: true,
          material: true,
          updatedAt: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
