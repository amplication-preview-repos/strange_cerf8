/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WaterLayer } from "./WaterLayer";
import { WaterLayerCountArgs } from "./WaterLayerCountArgs";
import { WaterLayerFindManyArgs } from "./WaterLayerFindManyArgs";
import { WaterLayerFindUniqueArgs } from "./WaterLayerFindUniqueArgs";
import { CreateWaterLayerArgs } from "./CreateWaterLayerArgs";
import { UpdateWaterLayerArgs } from "./UpdateWaterLayerArgs";
import { DeleteWaterLayerArgs } from "./DeleteWaterLayerArgs";
import { WaterLayerService } from "../waterLayer.service";
@graphql.Resolver(() => WaterLayer)
export class WaterLayerResolverBase {
  constructor(protected readonly service: WaterLayerService) {}

  async _waterLayersMeta(
    @graphql.Args() args: WaterLayerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WaterLayer])
  async waterLayers(
    @graphql.Args() args: WaterLayerFindManyArgs
  ): Promise<WaterLayer[]> {
    return this.service.waterLayers(args);
  }

  @graphql.Query(() => WaterLayer, { nullable: true })
  async waterLayer(
    @graphql.Args() args: WaterLayerFindUniqueArgs
  ): Promise<WaterLayer | null> {
    const result = await this.service.waterLayer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WaterLayer)
  async createWaterLayer(
    @graphql.Args() args: CreateWaterLayerArgs
  ): Promise<WaterLayer> {
    return await this.service.createWaterLayer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WaterLayer)
  async updateWaterLayer(
    @graphql.Args() args: UpdateWaterLayerArgs
  ): Promise<WaterLayer | null> {
    try {
      return await this.service.updateWaterLayer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WaterLayer)
  async deleteWaterLayer(
    @graphql.Args() args: DeleteWaterLayerArgs
  ): Promise<WaterLayer | null> {
    try {
      return await this.service.deleteWaterLayer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
