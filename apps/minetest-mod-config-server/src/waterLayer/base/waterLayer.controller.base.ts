/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WaterLayerService } from "../waterLayer.service";
import { WaterLayerCreateInput } from "./WaterLayerCreateInput";
import { WaterLayer } from "./WaterLayer";
import { WaterLayerFindManyArgs } from "./WaterLayerFindManyArgs";
import { WaterLayerWhereUniqueInput } from "./WaterLayerWhereUniqueInput";
import { WaterLayerUpdateInput } from "./WaterLayerUpdateInput";

export class WaterLayerControllerBase {
  constructor(protected readonly service: WaterLayerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WaterLayer })
  async createWaterLayer(
    @common.Body() data: WaterLayerCreateInput
  ): Promise<WaterLayer> {
    return await this.service.createWaterLayer({
      data: data,
      select: {
        createdAt: true,
        depth: true,
        id: true,
        salinity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WaterLayer] })
  @ApiNestedQuery(WaterLayerFindManyArgs)
  async waterLayers(@common.Req() request: Request): Promise<WaterLayer[]> {
    const args = plainToClass(WaterLayerFindManyArgs, request.query);
    return this.service.waterLayers({
      ...args,
      select: {
        createdAt: true,
        depth: true,
        id: true,
        salinity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WaterLayer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async waterLayer(
    @common.Param() params: WaterLayerWhereUniqueInput
  ): Promise<WaterLayer | null> {
    const result = await this.service.waterLayer({
      where: params,
      select: {
        createdAt: true,
        depth: true,
        id: true,
        salinity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WaterLayer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWaterLayer(
    @common.Param() params: WaterLayerWhereUniqueInput,
    @common.Body() data: WaterLayerUpdateInput
  ): Promise<WaterLayer | null> {
    try {
      return await this.service.updateWaterLayer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          depth: true,
          id: true,
          salinity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WaterLayer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWaterLayer(
    @common.Param() params: WaterLayerWhereUniqueInput
  ): Promise<WaterLayer | null> {
    try {
      return await this.service.deleteWaterLayer({
        where: params,
        select: {
          createdAt: true,
          depth: true,
          id: true,
          salinity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
