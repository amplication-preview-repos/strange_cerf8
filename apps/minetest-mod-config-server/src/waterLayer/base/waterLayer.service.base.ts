/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WaterLayer as PrismaWaterLayer } from "@prisma/client";

export class WaterLayerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WaterLayerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.waterLayer.count(args);
  }

  async waterLayers<T extends Prisma.WaterLayerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaterLayerFindManyArgs>
  ): Promise<PrismaWaterLayer[]> {
    return this.prisma.waterLayer.findMany<Prisma.WaterLayerFindManyArgs>(args);
  }
  async waterLayer<T extends Prisma.WaterLayerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaterLayerFindUniqueArgs>
  ): Promise<PrismaWaterLayer | null> {
    return this.prisma.waterLayer.findUnique(args);
  }
  async createWaterLayer<T extends Prisma.WaterLayerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaterLayerCreateArgs>
  ): Promise<PrismaWaterLayer> {
    return this.prisma.waterLayer.create<T>(args);
  }
  async updateWaterLayer<T extends Prisma.WaterLayerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaterLayerUpdateArgs>
  ): Promise<PrismaWaterLayer> {
    return this.prisma.waterLayer.update<T>(args);
  }
  async deleteWaterLayer<T extends Prisma.WaterLayerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaterLayerDeleteArgs>
  ): Promise<PrismaWaterLayer> {
    return this.prisma.waterLayer.delete(args);
  }
}
